import asyncio
import logging
import random
import bleach
from datetime import datetime, timedelta, date
from typing import List, Optional
from sqlalchemy import (
    Column, Date, Integer, String, Boolean, DateTime, ForeignKey,
    select, func, Text as SQLText
)
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
from sqlalchemy.orm import declarative_base, relationship, sessionmaker, aliased

from aiogram import Bot, Dispatcher, Router, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram import BaseMiddleware
from aiogram.types import Update
from typing import Callable, Dict, Any, Awaitable

API_TOKEN = '7799452151:AAGCCzzHg7vght2oOFTMyFcnVdkH2Phipnw'
ADMIN_IDS = [747885035]

logging.basicConfig(level=logging.INFO)

Base = declarative_base()
engine = create_async_engine('sqlite+aiosqlite:///giveaway.db', echo=False)
Session = sessionmaker(bind=engine, class_=AsyncSession, expire_on_commit=False)

bot = Bot(token=API_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())
router = Router()
dp.include_router(router)

allowed_tags = ['b', 'i', 'u', 's', 'code', 'a']

# --- –ú–æ–¥–µ–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ---

class Giveaway(Base):
    __tablename__ = 'giveaways'
    id = Column(Integer, primary_key=True)
    text = Column(SQLText, nullable=False)
    winners_count = Column(Integer, nullable=False)
    end_time = Column(DateTime, nullable=False)
    completed = Column(Boolean, default=False, nullable=False)
    subscribe_channels = Column(String, default="")
    post_channel = Column(String, nullable=True)
    message_id = Column(Integer, nullable=True)
    chat_id = Column(String, nullable=True)

    participants = relationship("Participant", back_populates="giveaway", cascade="all, delete-orphan")
    winners = relationship("Winner", back_populates="giveaway", cascade="all, delete-orphan")

class Participant(Base):
    __tablename__ = 'participants'
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, nullable=False)
    username = Column(String)
    giveaway_id = Column(Integer, ForeignKey('giveaways.id'), nullable=False)
    giveaway = relationship("Giveaway", back_populates="participants")

class Winner(Base):
    __tablename__ = 'winners'
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, nullable=False)
    username = Column(String)
    giveaway_id = Column(Integer, ForeignKey('giveaways.id'), nullable=False)
    giveaway = relationship("Giveaway", back_populates="winners")

class User(Base):
    __tablename__ = 'users'
    user_id = Column(Integer, primary_key=True)
    username = Column(String, nullable=True)
    referred_by = Column(Integer, nullable=True)
    notify = Column(Boolean, default=True)
    registered_at = Column(Date, default=date.today)
    coins = Column(Integer, default=3)
    banned = Column(Boolean, default=False)
    ban_reason = Column(String, nullable=True)

# --- Middleware –¥–ª—è –±–∞–Ω–æ–≤ ---

class BanFilterMiddleware(BaseMiddleware):
    async def __call__(
        self,
        handler: Callable[[Update, Dict[str, Any]], Awaitable[Any]],
        event: Update,
        data: Dict[str, Any]
    ) -> Any:
        user_id = None
        if hasattr(event, "from_user") and event.from_user:
            user_id = event.from_user.id
        elif hasattr(event, "message") and event.message and event.message.from_user:
            user_id = event.message.from_user.id
        elif hasattr(event, "callback_query") and event.callback_query and event.callback_query.from_user:
            user_id = event.callback_query.from_user.id

        if user_id is not None:
            async with Session() as session:
                user = await session.get(User, user_id)
                if user and user.banned:
                    reason = user.ban_reason or "–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞."
                    text = f"‚õîÔ∏è –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}"
                    if hasattr(event, "answer"):
                        try:
                            await event.answer(text, show_alert=True)
                        except Exception:
                            pass
                    elif hasattr(event, "message") and event.message:
                        try:
                            await event.message.answer(text)
                        except Exception:
                            pass
                    return
        return await handler(event, data)

# --- FSM States ---

class GiveawayStates(StatesGroup):
    awaiting_text = State()
    awaiting_winners_count = State()
    awaiting_duration = State()
    awaiting_subscribe_channels = State()
    awaiting_post_channel = State()
    awaiting_broadcast_text = State()

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---

@router.message(F.text == "‚¨ÖÔ∏è –í –º–µ–Ω—é")
async def back_to_menu(message: Message):
    kb = ReplyKeyboardBuilder()
    kb.button(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")
    kb.button(text="üéÅ –ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏")
    kb.button(text="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    kb.button(text="üèÜ –¢–æ–ø –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π")
    kb.button(text="üïì –ò—Å—Ç–æ—Ä–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π")
    kb.button(text="ü§ù –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞")
    kb.button(text="üõí –ú–∞–≥–∞–∑–∏–Ω")
    kb.button(text="‚ùì FAQ")
    kb.button(text="üÜò –°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π")
    kb.adjust(2)
    await message.answer(
        "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n"
        "–í—ã–±–∏—Ä–∞–π, —á—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ! üòéüëá",
        reply_markup=kb.as_markup(resize_keyboard=True),
        parse_mode=ParseMode.HTML
    )

# --- FAQ ---

@router.message(F.text == "‚ùì FAQ")
async def faq_menu(message: Message):
    kb = InlineKeyboardBuilder()
    kb.button(text="–ö–∞–∫ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å?", callback_data="faq_how_to_participate")
    kb.button(text="–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –≤—ã–∏–≥—Ä—ã—à?", callback_data="faq_how_to_get_prize")
    kb.button(text="–ö–∞–∫ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞?", callback_data="faq_invite")
    kb.button(text="–û—Å—Ç–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="faq_other")
    kb.button(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="faq_back")
    kb.adjust(1)
    await message.answer(
        "‚ùì <b>FAQ ‚Äî –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã</b>\n"
        "üëá –ñ–º–∏ –Ω–∞ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –∏ –ø–æ–ª—É—á–∏ –æ—Ç–≤–µ—Ç!",
        reply_markup=kb.as_markup(),
        parse_mode=ParseMode.HTML
    )

@router.callback_query(F.data.startswith("faq_"))
async def faq_answer(callback: CallbackQuery):
    data = callback.data
    if data == "faq_how_to_participate":
        text = "–ß—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ, –≤—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å¬ª."
    elif data == "faq_how_to_get_prize":
        text = "–ü–æ–±–µ–¥–∏—Ç–µ–ª—è–º –ø—Ä–∏—Ö–æ–¥–∏—Ç –ª–∏—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞ ‚Äî —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –º–µ–Ω—é –±–æ—Ç–∞."
    elif data == "faq_invite":
        text = "–í —Ä–∞–∑–¥–µ–ª–µ ¬´–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞¬ª –Ω–∞–π–¥–∏—Ç–µ –≤–∞—à—É —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë –¥—Ä—É–∑—å—è–º."
    elif data == "faq_other":
        text = "–ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –æ—Ç–≤–µ—Ç–∞ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –º–µ–Ω—é –±–æ—Ç–∞."
    elif data == "faq_back":
        await back_to_menu(callback.message)
        await callback.answer()
        return
    else:
        text = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–∑ –º–µ–Ω—é."
    await callback.answer(text, show_alert=True)

# --- –ú–∞–≥–∞–∑–∏–Ω ---

@router.message(F.text == "üõí –ú–∞–≥–∞–∑–∏–Ω")
async def shop_menu(message: Message):
    async with Session() as session:
        user = await session.get(User, message.from_user.id)
        coins = user.coins if user else 0
    kb = ReplyKeyboardBuilder()
    kb.button(text="üîÑ –û–±–º–µ–Ω—è—Ç—å –º–æ–Ω–µ—Ç—ã –Ω–∞ $VOXL")
    kb.button(text="‚¨ÖÔ∏è –í –º–µ–Ω—é")
    kb.adjust(2)
    await message.answer(
        f"üõç <b>–ú–∞–≥–∞–∑–∏–Ω –ø—Ä–∏–∑–æ–≤</b>\n"
        f"üí∞ <b>–¢–≤–æ–π –±–∞–ª–∞–Ω—Å:</b> {coins} –º–æ–Ω–µ—Ç\n\n"
        "–ß—Ç–æ —Ö–æ—á–µ—à—å –æ–±–º–µ–Ω—è—Ç—å —Å–µ–≥–æ–¥–Ω—è?\n"
        "üîÑ –ú–æ–Ω–µ—Ç—ã –Ω–∞ $VOXL ‚Äî –ø—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω–æ–µ!\n\n"
        "üîÑ 1 –º–æ–Ω–µ—Ç–∞ = 50 $VOXL\n\n"
        "üîÑ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –æ–±–º–µ–Ω—è: 100 –º–æ–Ω–µ—Ç\n\n"
        "‚¨áÔ∏è –ñ–º–∏ –∫–Ω–æ–ø–∫—É:",
        reply_markup=kb.as_markup(resize_keyboard=True),
        parse_mode=ParseMode.HTML
    )

@router.message(F.text == "üîÑ –û–±–º–µ–Ω—è—Ç—å –º–æ–Ω–µ—Ç—ã –Ω–∞ $VOXL")
async def exchange_coin_voxel(message: Message):
    async with Session() as session:
        user = await session.get(User, message.from_user.id)
        max_voxel = user.coins if user else 0
        if max_voxel < 100:
            await message.answer("–î–ª—è –æ–±–º–µ–Ω–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 100 –º–æ–Ω–µ—Ç.")
            return
    kb = InlineKeyboardBuilder()
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10 –∫–Ω–æ–ø–æ–∫
    max_buttons = min(max_voxel // 100, 10)
    for i in range(1, max_buttons + 1):
        n = i * 100
        kb.button(text=f"{n}", callback_data=f"exchange_voxel_{n}")
    kb.adjust(3)
    await message.answer(
        "–°–∫–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç –æ–±–º–µ–Ω—è—Ç—å –Ω–∞ $VOXL? (5000 $VOXL = 100 –º–æ–Ω–µ—Ç)\n"
        "(–ü–æ–∫–∞–∑–∞–Ω–æ –Ω–µ –±–æ–ª–µ–µ 10 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –µ—Å–ª–∏ —É –≤–∞—Å –º–Ω–æ–≥–æ –º–æ–Ω–µ—Ç ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫—Ä—É–ø–Ω—ã–π –æ–±–º–µ–Ω!)",
        reply_markup=kb.as_markup()
    )

@router.callback_query(F.data.startswith("exchange_voxel_"))
async def process_exchange_voxel(callback: CallbackQuery):
    amount = int(callback.data.split("_")[-1])
    voxels = amount * 50  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ!
    async with Session() as session:
        user = await session.get(User, callback.from_user.id)
        if user.coins < amount:
            await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –æ–±–º–µ–Ω–∞!", show_alert=True)
            return
        user.coins -= amount
        final_coins = user.coins
        await session.commit()

    await callback.answer(
        f"üí∏ –ì–æ—Ç–æ–≤–æ! {amount} –º–æ–Ω–µ—Ç –ø—Ä–µ–≤—Ä–∞—â–µ–Ω—ã –≤ {voxels} $VOXL!\n"
        "üí¨ –ù–∞–ø–∏—à–∏ –∞–¥–º–∏–Ω—É –≤ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã.",
        show_alert=True
    )
    await callback.message.edit_text(
        f"–í—ã —É—Å–ø–µ—à–Ω–æ –æ–±–º–µ–Ω—è–ª–∏ {amount} –º–æ–Ω–µ—Ç –Ω–∞ {voxels} $VOXL!\n"
        "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è $VOXL."
    )

    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(
                admin_id,
                f"üí± –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback.from_user.username or callback.from_user.id} "
                f"(ID: <code>{callback.from_user.id}</code>) –æ–±–º–µ–Ω—è–ª {amount} –º–æ–Ω–µ—Ç –Ω–∞ {voxels} $VOXL.\n"
                f"–û—Å—Ç–∞–ª–æ—Å—å –º–æ–Ω–µ—Ç: <b>{final_coins}</b>",
                parse_mode=ParseMode.HTML
            )
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {e}")

# --- –ë–∞–ª–∞–Ω—Å –º–æ–Ω–µ—Ç ---

@router.message(F.text == "üé´ –ú–æ–∏ –º–æ–Ω–µ—Ç—ã")
async def show_coins(message: Message):
    async with Session() as session:
        user = await session.get(User, message.from_user.id)
        coins = user.coins if user else 0
    await message.answer(f"ü™ô –í–∞—à–∏ –º–æ–Ω–µ—Ç—ã: {coins}")

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å —É—á–µ—Ç–æ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞) ---

async def add_coins(user_id: int, amount: int):
    async with Session() as session:
        user = await session.get(User, user_id)
        if user:
            user.coins += amount
            await session.commit()

async def remove_coins(user_id: int, amount: int):
    async with Session() as session:
        user = await session.get(User, user_id)
        if user and user.coins >= amount:
            user.coins -= amount
            await session.commit()
            return True
        return False

async def register_user(user_id: int, username: Optional[str] = None, ref_id: Optional[int] = None):
    async with Session() as session:
        user = await session.get(User, user_id)
        if not user:
            referred_by = ref_id if ref_id and ref_id != user_id else None
            user = User(user_id=user_id, username=username, referred_by=referred_by, registered_at=date.today(), coins=3)
            session.add(user)
            await session.commit()
            if referred_by:
                await add_coins(referred_by, 2)
        else:
            if username and user.username != username:
                user.username = username
                await session.commit()

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ---

async def check_user_subscriptions(user_id: int, channel_ids: List[int]) -> bool:
    for ch_id in channel_ids:
        try:
            member = await bot.get_chat_member(ch_id, user_id)
            if member.status in ('left', 'kicked'):
                return False
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ {user_id} –Ω–∞ {ch_id}: {e}")
            return False
    return True

# --- –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏/–æ—Ç–ø–∏—Å–∫–∏ –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ---

def get_notify_keyboard(user_notify: bool) -> InlineKeyboardMarkup:
    if user_notify:
        return InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üîï –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="notify_off")]]
        )
    else:
        return InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="notify_on")]]
        )

# --- –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---

@router.message(Command("start"))
async def user_start(message: Message):
    args = ""
    if message.text and len(message.text.split()) > 1:
        args = message.text.split(maxsplit=1)[1]
    ref_id = None
    if args.startswith("ref_"):
        try:
            ref_id = int(args.split("_")[1])
        except Exception:
            ref_id = None
    await register_user(message.from_user.id, message.from_user.username, ref_id)
    kb = ReplyKeyboardBuilder()
    kb.button(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")
    kb.button(text="üéÅ –ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏")
    kb.button(text="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    kb.button(text="üèÜ –¢–æ–ø –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π")
    kb.button(text="üïì –ò—Å—Ç–æ—Ä–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π")
    kb.button(text="ü§ù –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞")
    kb.button(text="üõí –ú–∞–≥–∞–∑–∏–Ω")
    kb.button(text="‚ùì FAQ")
    kb.button(text="üÜò –°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π")
    kb.adjust(2)
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb.as_markup(resize_keyboard=True))

# --- –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---

@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: Message):
    await register_user(message.from_user.id, message.from_user.username)
    user_id = message.from_user.id
    async with Session() as session:
        user = await session.get(User, user_id)
        wins = (await session.execute(
            select(func.count(Winner.id)).where(Winner.user_id == user_id)
        )).scalar_one()
        parts = (await session.execute(
            select(func.count(Participant.id)).where(Participant.user_id == user_id)
        )).scalar_one()
        refs = (await session.execute(
            select(func.count(User.user_id)).where(User.referred_by == user_id)
        )).scalar_one()
        coins = user.coins if user else 0
    text = (
        f"üë§ <b>–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        f"üÜî ID: <code>{user_id}</code>\n"
        f"üëæ –ù–∏–∫: @{message.from_user.username or '‚Äî'}\n"
        f"üé≤ –£—á–∞—Å—Ç–∏–π –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö: <b>{parts}</b>\n"
        f"üèÜ –ü–æ–±–µ–¥: <b>{wins}</b>\n"
        f"ü§ù –î—Ä—É–∑–µ–π –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: <b>{refs}</b>\n"
        f"ü™ô –ú–æ–Ω–µ—Ç–æ–∫: <b>{coins}</b>\n"
        f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'<b>–í–ö–õ</b> ‚úÖ' if (user and user.notify) else '<b>–í–´–ö–õ</b> ‚ùå'}"
    )
    await message.answer(text, parse_mode=ParseMode.HTML, reply_markup=get_notify_keyboard(user.notify if user else True))

# --- –ú–µ–Ω—é: –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞ ---

async def get_ref_link(user_id: int) -> str:
    bot_info = await bot.me()
    return f"https://t.me/{bot_info.username}?start=ref_{user_id}"

@router.message(F.text == "ü§ù –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞")
async def invite_friend(message: Message):
    user_id = message.from_user.id
    ref_link = await get_ref_link(user_id)
    async with Session() as session:
        refs = (await session.execute(
            select(func.count(User.user_id)).where(User.referred_by == user_id)
        )).scalar_one()
    text = (
        f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n"
        f"<code>{ref_link}</code>\n\n"
        f"–í—ã —É–∂–µ –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏: <b>{refs}</b> –¥—Ä—É–∑–µ–π!\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –¥—Ä—É–∑—å—è–º ‚Äî –∑–∞ –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—É—Å—Ç–∏—Ç –±–æ—Ç–∞ –ø–æ –Ω–µ–π, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ +1 –∫ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–º!"
    )
    await message.answer(text, parse_mode=ParseMode.HTML)

# --- –ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è ---

GIVEAWAY_POST_TEMPLATE = (
    "{text}\n"
    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    "üë• <b>–£–∂–µ —É—á–∞—Å—Ç–≤—É—é—Ç:</b> <b>{participants_count}</b>\n"
    "üèÜ <b>–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:</b> <b>{winners_count}</b>\n"
    "‚è∞ <b>–î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è:</b> {remain_str}\n"
    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    "<b>–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å?</b>\n"
    "1Ô∏è‚É£ –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã\n"
    "2Ô∏è‚É£ –ñ–º–∏ <b>–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å</b> –∏ –∂–¥–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞!\n"
    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    "üçÄ <b>–£–¥–∞—á–∏!</b>"
)

@router.message(F.text == "üéÅ –ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏")
async def show_active_giveaways(message: Message):
    await register_user(message.from_user.id, message.from_user.username)
    async with Session() as session:
        now = datetime.utcnow()
        query = await session.execute(
            select(Giveaway)
            .where(Giveaway.completed == False)
            .where(Giveaway.end_time > now)
            .order_by(Giveaway.end_time)
        )
        giveaways = query.scalars().all()
        if not giveaways:
            await message.answer("–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π.")
            return
        for giveaway in giveaways:
            remain = giveaway.end_time - datetime.utcnow()
            mins, secs = divmod(int(remain.total_seconds()), 60)
            remain_str = f"–û—Å—Ç–∞–ª–æ—Å—å {mins} –º–∏–Ω {secs} —Å–µ–∫"
            count_q = await session.execute(
                select(func.count(Participant.id)).where(Participant.giveaway_id == giveaway.id)
            )
            count = count_q.scalar_one()
            kb = InlineKeyboardBuilder()
            kb.button(text="–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", callback_data=f"join_{giveaway.id}")
            markup = kb.as_markup()
            safe_text = bleach.clean(giveaway.text, tags=allowed_tags, strip=True)
            await message.answer(
                GIVEAWAY_POST_TEMPLATE.format(
                    text=safe_text,
                    winners_count=giveaway.winners_count,
                    participants_count=count,
                    remain_str=remain_str
                ),
                reply_markup=markup,
                parse_mode=ParseMode.HTML
            )

# --- –ò—Å—Ç–æ—Ä–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π ---
@router.message(F.text == "üïì –ò—Å—Ç–æ—Ä–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π")
async def show_history(message: Message):
    async with Session() as session:
        query = await session.execute(
            select(Giveaway).where(Giveaway.completed == True).order_by(Giveaway.end_time.desc()).limit(10)
        )
        giveaways = query.scalars().all()
        if not giveaways:
            await message.answer("–ü–æ–∫–∞ —á—Ç–æ –∏—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞... –ù–æ –≤—Å—ë –≤–ø–µ—Ä–µ–¥–∏! üöÄ")
            return
        text = "üïì <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏:</b>\n\n"
        for g in giveaways:
            wq = await session.execute(
                select(Winner.username).where(Winner.giveaway_id == g.id)
            )
            ws = [u[0] for u in wq.all()]
            winners = ", ".join([f"@{u}" if u else "‚Äî" for u in ws]) if ws else "‚Äî"
            safe_title = bleach.clean(g.text.replace('\n', ' ')[:30], tags=allowed_tags, strip=True)
            link = None
            if g.chat_id and g.message_id:
                try:
                    chat = await bot.get_chat(int(g.chat_id))
                    if getattr(chat, "username", None):
                        link = f"https://t.me/{chat.username}/{g.message_id}"
                except Exception:
                    pass
            link_str = f' <a href="{link}">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>' if link else ""
            text += f"‚Ä¢ <b>{safe_title}...</b>{link_str}\n–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏: {winners}\n\n"
        if len(text) > 4000:
            text = text[:3990] + "\n..."
        await message.answer(
            text,
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True  # <--- –≤–æ—Ç —ç—Ç–æ –≤–∞–∂–Ω–æ!
        )
# --- –£—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ (–ë–ï–°–ü–õ–ê–¢–ù–û!) ---

@router.callback_query(F.data.startswith("join_"))
async def join_giveaway(callback: CallbackQuery):
    await register_user(callback.from_user.id, callback.from_user.username)
    giveaway_id = int(callback.data.split("_")[1])
    user = callback.from_user

    async with Session() as session:
        giveaway = await session.get(Giveaway, giveaway_id)
        if not giveaway:
            return await callback.answer("–†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        if giveaway.completed:
            return await callback.answer("–†–æ–∑—ã–≥—Ä—ã—à —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω.", show_alert=True)

        channel_ids = [int(ch) for ch in giveaway.subscribe_channels.split(",") if ch]
        if channel_ids:
            if not await check_user_subscriptions(user.id, channel_ids):
                return await callback.answer("–í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã.", show_alert=True)

        participant_q = await session.execute(
            select(Participant).where(
                Participant.user_id == user.id,
                Participant.giveaway_id == giveaway_id
            )
        )
        participant = participant_q.scalar_one_or_none()
        if participant:
            return await callback.answer("–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ.", show_alert=True)

        participant = Participant(
            user_id=user.id,
            username=user.username or user.full_name,
            giveaway_id=giveaway_id
        )
        session.add(participant)
        await session.commit()
        await update_giveaway_message(giveaway_id)
        await add_coins(user.id, 1)

    await callback.answer("üéâ –¢—ã –≤ –∏–≥—Ä–µ! –ñ–µ–ª–∞–µ–º —É–¥–∞—á–∏ üçÄ")

# --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ (–æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Ç–µ–∫—Å—Ç) ---

async def update_giveaway_message(giveaway_id: int):
    async with Session() as session:
        giveaway = await session.get(Giveaway, giveaway_id)
        if not giveaway:
            return

        kb = InlineKeyboardBuilder()
        if not giveaway.completed:
            kb.button(text="–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", callback_data=f"join_{giveaway.id}")

        count_q = await session.execute(
            select(func.count(Participant.id)).where(Participant.giveaway_id == giveaway.id)
        )
        count = count_q.scalar_one()

        remain = giveaway.end_time - datetime.utcnow()
        if remain.total_seconds() < 0 or giveaway.completed:
            remain_str = "–ó–∞–≤–µ—Ä—à–µ–Ω–æ"
        else:
            mins, secs = divmod(int(remain.total_seconds()), 60)
            remain_str = f"–û—Å—Ç–∞–ª–æ—Å—å {mins} –º–∏–Ω {secs} —Å–µ–∫"

        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç —Ä–æ–∑—ã–≥—Ä—ã—à–∞, —Ä–∞–∑—Ä–µ—à–∞—è —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ HTML-—Ç–µ–≥–∏
        safe_text = bleach.clean(giveaway.text, tags=allowed_tags, strip=True)
        text = GIVEAWAY_POST_TEMPLATE.format(
            text=safe_text,
            winners_count=giveaway.winners_count,
            participants_count=count,
            remain_str=remain_str
        )

        reply_markup = kb.as_markup() if not giveaway.completed else None

        if giveaway.completed:
            winners_q = await session.execute(
                select(Winner.username, Winner.user_id)
                .where(Winner.giveaway_id == giveaway.id)
            )
            winners = winners_q.all()
            if winners:
                text += "\n\n<b>–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:</b>\n"
                for username, user_id in winners:
                    if username:
                        text += f" - @{username}\n"
                    else:
                        text += f" - <code>{user_id}</code>\n"

        try:
            if giveaway.chat_id and giveaway.message_id:
                await bot.edit_message_text(
                    chat_id=int(giveaway.chat_id),
                    message_id=giveaway.message_id,
                    text=text,
                    reply_markup=reply_markup,
                    parse_mode=ParseMode.HTML
                )
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ {giveaway.id}: {e}")

# --- –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ (—Ç–æ—Ç –∂–µ —à–∞–±–ª–æ–Ω –ø—É–±–ª–∏–∫–∞—Ü–∏–∏) ---

@router.callback_query(F.data == "new_giveaway")
async def new_giveaway(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–æ–∑—ã–≥—Ä—ã—à–∞:")
    await state.set_state(GiveawayStates.awaiting_text)

@router.message(GiveawayStates.awaiting_text)
async def set_text(message: Message, state: FSMContext):
    await state.update_data(text=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:")
    await state.set_state(GiveawayStates.awaiting_winners_count)

@router.message(GiveawayStates.awaiting_winners_count)
async def set_winners_count(message: Message, state: FSMContext):
    try:
        count = int(message.text)
        if count < 1:
            raise ValueError()
    except ValueError:
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π (–±–æ–ª—å—à–µ 0).")
    await state.update_data(winners_count=count)
    await message.answer("–ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∑–∞–∫–æ–Ω—á–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à?")
    await state.set_state(GiveawayStates.awaiting_duration)

@router.message(GiveawayStates.awaiting_duration)
async def set_duration(message: Message, state: FSMContext):
    try:
        minutes = int(message.text)
        if minutes < 1:
            raise ValueError()
    except ValueError:
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç (–±–æ–ª—å—à–µ 0).")
    await state.update_data(duration=minutes)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: -100123456 -100654321).\n"
        "–ï—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
    )
    await state.set_state(GiveawayStates.awaiting_subscribe_channels)

@router.message(GiveawayStates.awaiting_subscribe_channels)
async def set_subscribe_channels(message: Message, state: FSMContext):
    text = message.text.strip()
    if text:
        try:
            channel_ids = [int(ch.strip()) for ch in text.split()]
        except Exception:
            return await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∫–∞–Ω–∞–ª–æ–≤. –í–≤–µ–¥–∏—Ç–µ ID —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
    else:
        channel_ids = []

    await state.update_data(subscribe_channels=channel_ids)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: -100123456).\n"
        "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ —Ç–æ—Ç –∂–µ —á–∞—Ç, –≥–¥–µ —Å–æ–∑–¥–∞—ë—Ç–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
    )
    await state.set_state(GiveawayStates.awaiting_post_channel)

@router.message(GiveawayStates.awaiting_post_channel)
async def set_post_channel(message: Message, state: FSMContext):
    text = message.text.strip()
    if text:
        try:
            post_channel = str(int(text))
        except Exception:
            return await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")
    else:
        post_channel = None

    data = await state.get_data()
    end_time = datetime.utcnow() + timedelta(minutes=data['duration'])

    async with Session() as session:
        giveaway = Giveaway(
            text=data['text'],
            winners_count=data['winners_count'],
            end_time=end_time,
            subscribe_channels=",".join(str(ch) for ch in data['subscribe_channels']),
            post_channel=post_channel
        )
        session.add(giveaway)
        await session.commit()
        await session.refresh(giveaway)

    kb = InlineKeyboardBuilder()
    kb.button(text="–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", callback_data=f"join_{giveaway.id}")
    chat_for_post = post_channel if post_channel else message.chat.id

    try:
        safe_text = bleach.clean(giveaway.text, tags=allowed_tags, strip=True)
        sent_msg = await bot.send_message(
        chat_id=chat_for_post,
        text=GIVEAWAY_POST_TEMPLATE.format(
        text=safe_text,
        winners_count=giveaway.winners_count,
        participants_count=0,
        remain_str=f"–û—Å—Ç–∞–ª–æ—Å—å {data['duration']} –º–∏–Ω 0 —Å–µ–∫"
    ),
    reply_markup=kb.as_markup(),
    parse_mode=ParseMode.HTML
)
        async with Session() as session:
            db_giveaway = await session.get(Giveaway, giveaway.id)
            db_giveaway.message_id = sent_msg.message_id
            db_giveaway.chat_id = str(sent_msg.chat.id)
            await session.commit()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {e}")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª.")

    await message.answer("–†–æ–∑—ã–≥—Ä—ã—à —Å–æ–∑–¥–∞–Ω!")
    asyncio.create_task(notify_all_users_about_giveaway(giveaway))
    await state.clear()
    asyncio.create_task(giveaway_watcher(giveaway.id))

# --- –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∏ —Ç–æ–ø—ã ---

# --- –ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–µ—Ç—ã" –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ ---

@router.message(Command("admin"))
async def admin_panel(message: Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        return await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
    kb = InlineKeyboardBuilder()
    kb.button(text="üéâ –ù–æ–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à", callback_data="new_giveaway")
    kb.button(text="üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="admin_analytics")
    kb.button(text="üèÜ –¢–æ–ø –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π", callback_data="admin_top")
    kb.button(text="üëë –¢–æ–ø —Ä–µ—Ñ–æ–≤–æ–¥–æ–≤", callback_data="admin_top_ref")
    kb.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–µ—Ç—ã", callback_data="admin_add_coins")
    kb.button(text="‚õîÔ∏è –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_ban_user")
    kb.button(text="‚úÖ –†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_unban_user")
    kb.adjust(2)
    await message.answer("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=kb.as_markup())
    await state.clear()

# ban/unban
class BanUserStates(StatesGroup):
    waiting_for_user_id = State()
    waiting_for_reason = State()

class UnbanUserStates(StatesGroup):
    waiting_for_user_id = State()

@router.callback_query(F.data == "admin_ban_user")
async def admin_ban_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–∞–Ω–∞:")
    await state.set_state(BanUserStates.waiting_for_user_id)
    await callback.answer()

@router.message(BanUserStates.waiting_for_user_id)
async def admin_ban_user_id(message: Message, state: FSMContext):
    try:
        user_id = int(message.text.strip())
    except Exception:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID:")
        return
    await state.update_data(target_user_id=user_id)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –±–∞–Ω–∞:")
    await state.set_state(BanUserStates.waiting_for_reason)

@router.message(BanUserStates.waiting_for_reason)
async def admin_ban_reason(message: Message, state: FSMContext):
    data = await state.get_data()
    user_id = data["target_user_id"]
    reason = message.text.strip()
    async with Session() as session:
        user = await session.get(User, user_id)
        if not user:
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        elif user.banned:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–±–∞–Ω–µ–Ω.")
        else:
            user.banned = True
            user.ban_reason = reason
            await session.commit()
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–∞–Ω–µ–Ω.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
            try:
                await bot.send_message(user_id, f"‚õîÔ∏è –í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π!\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
            except Exception:
                pass
    await state.clear()

    class UnbanUserStates(StatesGroup):
        waiting_for_user_id = State()

@router.callback_query(F.data == "admin_unban_user")
async def admin_unban_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞:")
    await state.set_state(UnbanUserStates.waiting_for_user_id)
    await callback.answer()

@router.message(UnbanUserStates.waiting_for_user_id)
async def admin_unban_user_id(message: Message, state: FSMContext):
    try:
        user_id = int(message.text.strip())
    except Exception:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID:")
        return
    async with Session() as session:
        user = await session.get(User, user_id)
        if not user:
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        elif not user.banned:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–∞–Ω–µ–Ω.")
        else:
            user.banned = False
            user.ban_reason = None
            await session.commit()
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–∞–Ω–µ–Ω.")
            try:
                await bot.send_message(user_id, "‚úÖ –í–∞—à –±–∞–Ω —Å–Ω—è—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.")
            except Exception:
                pass
    await state.clear()



# --- FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–Ω–µ—Ç ---

class AddCoinsStates(StatesGroup):
    waiting_for_user_id = State()
    waiting_for_amount = State()

@router.callback_query(F.data == "admin_add_coins")
async def admin_add_coins_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –Ω–∞—á–∏—Å–ª–∏—Ç—å –º–æ–Ω–µ—Ç—ã:")
    await state.set_state(AddCoinsStates.waiting_for_user_id)
    await callback.answer()

@router.message(AddCoinsStates.waiting_for_user_id)
async def admin_add_coins_user_id(message: Message, state: FSMContext):
    try:
        user_id = int(message.text.strip())
    except Exception:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID:")
        return
    await state.update_data(target_user_id=user_id)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è:")
    await state.set_state(AddCoinsStates.waiting_for_amount)

@router.message(AddCoinsStates.waiting_for_amount)
async def admin_add_coins_amount(message: Message, state: FSMContext):
    data = await state.get_data()
    try:
        amount = int(message.text.strip())
        if amount <= 0:
            raise ValueError()
    except Exception:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:")
        return

    target_user_id = data.get("target_user_id")
    async with Session() as session:
        user = await session.get(User, target_user_id)
        if not user:
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return
        user.coins += amount
        await session.commit()
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <code>{target_user_id}</code> –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount} –º–æ–Ω–µ—Ç.\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{user.coins}</b>", parse_mode=ParseMode.HTML)
        try:
            await bot.send_message(
                target_user_id,
                f"ü™ô –í–∞–º –±—ã–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount} –º–æ–Ω–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!\n–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{user.coins}</b>",
                parse_mode=ParseMode.HTML
            )
        except Exception:
            pass  # –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await state.clear()


@router.callback_query(F.data == "admin_analytics")
async def admin_analytics_callback(callback: CallbackQuery):
    await admin_analytics(callback.message)
    await callback.answer()

@router.callback_query(F.data == "admin_top")
async def admin_top_callback(callback: CallbackQuery):
    await top_winners(callback.message)
    await callback.answer()

@router.callback_query(F.data == "admin_top_ref")
async def admin_top_ref_callback(callback: CallbackQuery):
    User2 = aliased(User)
    async with Session() as session:
        result = await session.execute(
            select(User.user_id, User.username, func.count(User2.user_id).label("refs"))
            .outerjoin(User2, User2.referred_by == User.user_id)
            .group_by(User.user_id, User.username)
            .order_by(func.count(User2.user_id).desc())
            .limit(10)
        )
        top = result.all()
    text = "üëë <b>–¢–æ–ø —Ä–µ—Ñ–æ–≤–æ–¥–æ–≤:</b>\n\n"
    for i, (uid, username, refs) in enumerate(top, 1):
        username_str = f"@{username}" if username else f"<code>{uid}</code>"
        text += f"{i}. {username_str} ‚Äî {refs} –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö\n"
    await callback.message.answer(text, parse_mode=ParseMode.HTML)
    await callback.answer()

# --- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---

async def user_stats(message: Message):
    user_id = message.from_user.id
    async with Session() as session:
        win_count = (await session.execute(
            select(func.count(Winner.id)).where(Winner.user_id == user_id)
        )).scalar_one()
        participated_count = (await session.execute(
            select(func.count(Participant.id)).where(Participant.user_id == user_id)
        )).scalar_one()
        user = await session.get(User, user_id)
        coins = user.coins if user else 0
    await message.answer(
        f"üèÖ –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f"–£—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö: {participated_count}\n"
        f"–í—ã–∏–≥—Ä—ã–≤–∞–ª–∏: {win_count}\n"
        f"–ú–æ–Ω–µ—Ç: {coins}"
    )

# --- –¢–æ–ø –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π ---

async def top_winners(message: Message):
    async with Session() as session:
        result = await session.execute(
            select(Winner.username, func.count(Winner.id).label("wins"))
            .group_by(Winner.user_id, Winner.username)
            .order_by(func.count(Winner.id).desc())
            .limit(10)
        )
        top = result.all()

    if not top:
        await message.answer("–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    text = "üèÜ –¢–æ–ø –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:\n\n"
    for i, (username, wins) in enumerate(top, 1):
        text += f"{i}. @{username} - {wins} –≤—ã–∏–≥—Ä—ã—à–µ–π\n"

    await message.answer(text)

# --- –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞) –¥–ª—è –∞–¥–º–∏–Ω–∞ ---

@router.message(F.text == "üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
async def admin_analytics(message: Message):
    async with Session() as session:
        total_users = (await session.execute(select(func.count(User.user_id)))).scalar_one()
        week_ago = date.today() - timedelta(days=7)
        try:
            new_users = (await session.execute(
                select(func.count(User.user_id)).where(User.registered_at >= week_ago)
            )).scalar_one()
        except Exception:
            new_users = "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

        total_giveaways = (await session.execute(
            select(func.count(Giveaway.id))
        )).scalar_one()
        completed_giveaways = (await session.execute(
            select(func.count(Giveaway.id)).where(Giveaway.completed == True)
        )).scalar_one()
        active_giveaways = (await session.execute(
            select(func.count(Giveaway.id)).where(Giveaway.completed == False)
        )).scalar_one()

        total_winners = (await session.execute(
            select(func.count(Winner.id))
        )).scalar_one()
        top_winner = (await session.execute(
            select(Winner.username, func.count(Winner.id).label("cnt"))
            .group_by(Winner.user_id)
            .order_by(func.count(Winner.id).desc())
            .limit(1)
        )).first()
        top_winner_str = f"@{top_winner[0]} ({top_winner[1]} –ø–æ–±–µ–¥)" if top_winner else "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

        User2 = aliased(User)
        top_ref = (await session.execute(
            select(User.username, func.count(User2.user_id).label("refs"))
            .outerjoin(User2, User2.referred_by == User.user_id)
            .group_by(User.user_id, User.username)
            .order_by(func.count(User2.user_id).desc())
            .limit(1)
        )).first()
        top_ref_str = f"@{top_ref[0]} ({top_ref[1]} –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö)" if top_ref else "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

    text = (
        f"üìà <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞:</b>\n"
        f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"–ù–æ–≤—ã—Ö –∑–∞ 7 –¥–Ω–µ–π: {new_users}\n"
        f"–í—Å–µ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π: {total_giveaways}\n"
        f"–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π: {active_giveaways}\n"
        f"–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π: {completed_giveaways}\n"
        f"–í—Å–µ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {total_winners}\n"
        f"–¢–æ–ø –ø–æ–±–µ–¥–∏—Ç–µ–ª—å: {top_winner_str}\n"
        f"–¢–æ–ø —Ä–µ—Ñ–æ–≤–æ–¥: {top_ref_str}\n"
    )
    await message.answer(text, parse_mode=ParseMode.HTML)

# --- –•–µ–Ω–¥–ª–µ—Ä—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ —Ç–æ–ø–∞ ---

@router.message(F.text == "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def button_user_stats(message: Message):
    await register_user(message.from_user.id, message.from_user.username)
    await user_stats(message)

@router.message(F.text == "üèÜ –¢–æ–ø –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π")
async def button_top_winners(message: Message):
    await register_user(message.from_user.id, message.from_user.username)
    await top_winners(message)


# –°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–æ–º
class FeedbackStates(StatesGroup):
    waiting_for_feedback = State()
    waiting_for_admin_reply = State()

import re

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è id —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ id —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
# –ü—Ä–∏ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ª—É—á—à–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —ç—Ç–æ –≤ –ë–î, –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º dict
USER_MSG_MAP = {}

@router.message(F.text == "üÜò –°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π")
async def contact_admin_start(message: Message, state: FSMContext):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—É. –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
    await state.set_state(FeedbackStates.waiting_for_feedback)

@router.message(F.text == "üÜò –°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π")
async def contact_admin_start(message: Message, state: FSMContext):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—É. –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
    await state.set_state(FeedbackStates.waiting_for_feedback)

@router.message(FeedbackStates.waiting_for_feedback)
async def contact_admin_process(message: Message, state: FSMContext):
    text = message.text
    user = message.from_user
    # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è HTML, –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ -> <br>
    admin_text = bleach.clean(text, tags=allowed_tags, strip=True).replace('\n', '<br>')
    for admin_id in ADMIN_IDS:
        try:
            sent = await bot.send_message(
                admin_id,
                f"üÜò <b>–°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π</b>\n"
                f"–û—Ç: @{user.username or user.id} (ID: <code>{user.id}</code>)\n"
                f"–î–ª—è –æ—Ç–≤–µ—Ç–∞: <code>/reply_{user.id}</code> –í–∞—à —Ç–µ–∫—Å—Ç\n\n"
                f"{admin_text}",
                parse_mode=ParseMode.HTML
            )
            USER_MSG_MAP[sent.message_id] = user.id
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {e}")
    await message.answer("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏. –°–ø–∞—Å–∏–±–æ!")
    await state.clear()

# --- –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ---
@router.message(F.text.regexp(r"^/reply_(\d+)\s+(.+)"))
async def admin_reply_command(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    match = re.match(r"^/reply_(\d+)\s+(.+)", message.text, re.DOTALL)
    if not match:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /reply_ID —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞")
        return
    user_id, reply_text = match.groups()
    try:
        user_id = int(user_id)
        await bot.send_message(
            user_id,
            f"üí¨ –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n\n{reply_text}"
        )
        await message.answer("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")
# --- –¢–∞–π–º–µ—Ä —Ä–æ–∑—ã–≥—Ä—ã—à–∞ ---

async def giveaway_watcher(giveaway_id: int):
    reminder_sent = False
    while True:
        await asyncio.sleep(5)
        async with Session() as session:
            giveaway = await session.get(Giveaway, giveaway_id)
            if not giveaway or giveaway.completed:
                break
            await update_giveaway_message(giveaway_id)
            remain = (giveaway.end_time - datetime.utcnow()).total_seconds()
            if not reminder_sent and remain <= 300 and remain > 0:
                participants_q = await session.execute(
                    select(Participant.user_id).where(Participant.giveaway_id == giveaway_id)
                )
                pids = {u for (u,) in participants_q.all()}
                for uid in pids:
                    try:
                        await bot.send_message(uid, f"‚è∞ –î–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –æ—Å—Ç–∞–ª–æ—Å—å 5 –º–∏–Ω—É—Ç!\n\n{bleach.clean(giveaway.text, tags=allowed_tags, strip=True)}")
                    except Exception as e:
                        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫—É {uid}: {e}")
                reminder_sent = True
            if giveaway.end_time <= datetime.utcnow():
                participants_q = await session.execute(
                    select(Participant).where(Participant.giveaway_id == giveaway_id)
                )
                participants = participants_q.scalars().all()
                if len(participants) == 0:
                    giveaway.completed = True
                    await session.commit()
                    await update_giveaway_message(giveaway_id)
                    break
                winners_count = min(giveaway.winners_count, len(participants))
                winners = random.sample(participants, winners_count)
                for w in winners:
                    winner_entry = Winner(
                        user_id=w.user_id,
                        username=w.username,
                        giveaway_id=giveaway_id
                    )
                    session.add(winner_entry)
                    await add_coins(w.user_id, 4)
                giveaway.completed = True
                await session.commit()
                await update_giveaway_message(giveaway_id)
                for w in winners:
                    try:
                        safe_text = bleach.clean(giveaway.text, tags=allowed_tags, strip=True)
                        await bot.send_message(
                        w.user_id,
                        f"üèÖ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b> –¢—ã —Å—Ç–∞–ª –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ:\n\n"
                        f"{safe_text}\n\n"
                        "üìù –ü–∏—à–∏ –∞–¥–º–∏–Ω—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞. –¢—ã ‚Äî –Ω–∞—Å—Ç–æ—è—â–∏–π –≤–µ–∑—É–Ω—á–∏–∫! üçÄ",
                        parse_mode=ParseMode.HTML
                    )
                    except Exception as e:
                        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é {w.user_id}: {e}")
                break

# --- –†–∞—Å—Å—ã–ª–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ ---

async def notify_all_users_about_giveaway(giveaway: Giveaway):
    async with Session() as session:
        users = (await session.execute(select(User.user_id).where(User.notify == True))).scalars().all()
    safe_text = bleach.clean(giveaway.text, tags=allowed_tags, strip=True)
    message_text = (
    "üÜï <b>–ó–∞–ø—É—â–µ–Ω –Ω–æ–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à!</b>\n\n"
    f"{safe_text}\n\n"
    f"‚è≥ –£—Å–ø–µ–π –ø–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å! –í—Ä–µ–º—è –¥–æ –∫–æ–Ω—Ü–∞: {(giveaway.end_time - datetime.utcnow()).seconds // 60} –º–∏–Ω"
)
    for uid in users:
        try:
            await bot.send_message(uid, message_text)
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {e}")

# --- –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏/–æ—Ç–ø–∏—Å–∫–∏ –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ---

@router.callback_query(F.data.in_(["notify_on", "notify_off"]))
async def switch_notify(callback: CallbackQuery):
    user_id = callback.from_user.id
    async with Session() as session:
        user = await session.get(User, user_id)
        if user:
            user.notify = callback.data == "notify_on"
            await session.commit()
            await callback.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
            await callback.message.edit_reply_markup(reply_markup=get_notify_keyboard(user.notify))
        else:
            await callback.answer("–û—à–∏–±–∫–∞!")

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –∏ –∑–∞–ø—É—Å–∫ ---

async def on_startup():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)
    logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞/–ø–æ–¥–∫–ª—é—á–µ–Ω–∞.")

async def main():
    await on_startup()
    dp.message.middleware(BanFilterMiddleware())
    dp.callback_query.middleware(BanFilterMiddleware())
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
